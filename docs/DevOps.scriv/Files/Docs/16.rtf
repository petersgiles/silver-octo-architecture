{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 CourierNewPSMT;}{\f1\fmodern\fcharset0\fprq2 Raleway,sans-serif;}{\f2\fmodern\fcharset0\fprq2 Raleway,sans-serif;}{\f3\fmodern\fcharset0\fprq2 Raleway,sans-serif;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;\red67\green69\blue58;}
{\*\listtable
{\list\listtemplateid1\listhybrid
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\'01\loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F;}{\levelnumbers;}\f1\fs-2\b1\i0\cf3\fi-360\li720\lin720}{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\'01\loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F;}{\levelnumbers;}\f1\fs-2\b1\i0\cf3\fi-360\li720\lin720}{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\'01\loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F;}{\levelnumbers;}\f1\fs-2\b1\i0\cf3\fi-360\li720\lin720}{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\fet2\ftnbj\aenddoc
\pgnrestart\pgnstarts0
\pard\plain \sa520\ltrch\loch {\f1\fs-2\b1\i0\cf3\cb2\highlight2 Continuous Delivery (CD) is a software strategy that enables organizations to deliver new features to users as fast and efficiently as possible. The core idea of CD is to create a repeatable, reliable and incrementally improving process for taking software from concept to customer. The goal of Continuous Delivery is to enable a constant flow of changes into production via an automated software production line. The Continuous Delivery pipeline is what makes it all happen.}
\par\plain {\f1\fs-2\b1\i0\cf3\cb2\highlight2 The pipeline breaks down the software delivery process into stages. Each stage is aimed at verifying the quality of new features from a different angle to validate the new functionality and prevent errors from affecting your users. The pipeline should provide feedback to the team and visibility into the flow of changes to everyone involved in delivering the new feature/s.}
\par\plain {\f1\fs-2\b1\i0\cf3\cb2\highlight2 There is no such thing as The Standard Pipeline, but a typical CD pipeline will include the following stages: build automation and continuous integration; test automation; and deployment automation.}
\par\pard\plain \li720\fi-360\sa520\ltrch\loch \ls1\ilvl0{\listtext\f1\fs-2\b1\i0\cf3	\loch\af1\hich\af1\dbch\af1\uc1\u9679\'3F	}{\f2\fs-2\b1\i1\cf3 Build automation and Continuous Integration}
\par\pard\plain \sa520\ltrch\loch {\f1\fs-2\b1\i0\cf3\cb2\highlight2 The pipeline starts by building the binaries to create the deliverables that will be passed to the subsequent stages. New features implemented by the developers are integrated into the central code base on a continuous basis, built and unit tested. This is the most direct feedback cycle that informs the development team about the health of their application code.}
\par\pard\plain \li720\fi-360\sa520\ltrch\loch \ls2\ilvl0{\listtext\f1\fs-2\b1\i0\cf3	\loch\af1\hich\af1\dbch\af1\uc1\u9679\'3F	}{\f2\fs-2\b1\i1\cf3 Test Automation}
\par\pard\plain \sa520\ltrch\loch {\f1\fs-2\b1\i0\cf3\cb2\highlight2 Throughout this stage, the new version of an application is rigorously tested to ensure that it meets all desired system qualities. It is important that all relevant aspects \hich\f1 \emdash \loch\f1  whether functionality, security, performance or compliance \hich\f1 \emdash \loch\f1  are verified by the pipeline. The stage may involve different types of automated or (initially, at least) manual activities.}
\par\pard\plain \li720\fi-360\sa520\ltrch\loch \ls3\ilvl0{\listtext\f1\fs-2\b1\i0\cf3	\loch\af1\hich\af1\dbch\af1\uc1\u9679\'3F	}{\f2\fs-2\b1\i1\cf3 Deployment Automation}
\par\pard\plain \sa520\ltrch\loch {\f1\fs-2\b1\i0\cf3\cb2\highlight2 A deployment is required every time the application is installed in an environment for testing, but the most critical moment for deployment automation is rollout time. Since the preceding stages have verified the overall quality of the system, this is a low-risk step. The deployment can be staged, with the new version being initially released to a subset of the production environment and monitored before being completely rolled out. The deployment is automated, allowing for the reliable delivery of new functionality to users within minutes, if needed.}
\par\plain {\f3\fs-2\b1\i0\cf3 Your Pipeline Needs Platform Provisioning and Configuration Management}
\par\plain {\f1\fs-2\b1\i0\cf3\cb2\highlight2 The deployment pipeline is supported by platform provisioning and system configuration management, which allow teams to create, maintain and tear down complete environments automatically or at the push of a button.}
\par\plain {\f1\fs-2\b1\i0\cf3\cb2\highlight2 Automated platform provisioning ensures that your candidate applications are deployed to, and tests carried out against, correctly configured and reproducible environments. It also facilitates horizontal scalability and allows the business to try out new products in a sandbox environment at any time.}
\par\plain {\f3\fs-2\b1\i0\cf3 Orchestrating it all: Release and Pipeline Orchestration}
\par\plain {\f1\fs-2\b1\i0\cf3\cb2\highlight2 The multiple stages in a deployment pipeline involve different groups of people collaborating and supervising the release of the new version of your application. Release and pipeline orchestration provides a top-level view of the entire pipeline, allowing you to define and control the stages and gain insight into the overall software delivery process.}
\par\plain {\f1\fs-2\b1\i0\cf3\cb2\highlight2 By carrying out value stream mappings on your releases, you can highlight any remaining inefficiencies and hot spots, and pinpoint opportunities to improve your pipeline.}
\par\plain {\f3\fs-2\b1\i0\cf3 Don\loch\af3\hich\af3\dbch\af3\uc1\u8217\'92t Add New Functionality Until You Get The Quality Right!}
\par\plain {\f1\fs-2\b1\i0\cf3\cb2\highlight2 Continuous Delivery is about enabling your organization to bring new features to production, one by one, quickly and reliably. That means that every individual feature needs to be tested prior to rollout, ensuring the feature meets the quality requirements of the overall system.}
\par\plain {\f1\fs-2\b1\i0\cf3\cb2\highlight2 In a traditional environment, development teams typically try to implement an entire new version in one go, addressing software quality properties (such as robustness, extensibility, maintainability) only when the project is close to completion. However, as deadlines loom and budget pressures grow, quality is often the first thing that is compromised.}
\par\plain {\f1\fs-2\b1\i0\cf3\cb2\highlight2 Poor system quality, low-user satisfaction and endless \loch\af1\hich\af1\dbch\af1\uc1\u8220\'93quality band-aids\u8221\'94 can be avoided by adopting the principle of not adding new functionality before getting the quality right. You should always first meet and maintain your quality levels and only then consider gradually adding functionality to the system.}
\par\plain {\f1\fs-2\b1\i0\cf3\cb2\highlight2 With CD, each new feature is required to meet the level of quality expected for the system as a whole, right from the start. Only once this quality level has been reached can the feature be moved to production.}
\par\plain {\f3\fs-2\b1\i0\cf3 Getting Started With Continuous Delivery}
\par\plain {\f1\fs-2\b1\i0\cf3\cb2\highlight2 Obviously, organizations cannot and should not rush into adopting Continuous Delivery all at once throughout all their business units. The best approach is to focus on improving your biggest delivery bottleneck. CD will automatically show you what the next bottleneck is. This puts you on a measurable improvement path.}
\par\plain {\f1\fs-2\b1\i0\cf3\cb2\highlight2 The main goal of using Continuous Delivery is to roll out new features and functionalities that are better than previous iterations \hich\f1 \emdash \loch\f1  gradually incorporating and refining the CD principle throughout the organization. Go slowly, go smoothly \hich\f1 \emdash \loch\f1  and watch the improvements!}}