' -*- plantuml -*-
@startuml
actor run
participant gen <<PUML_Generator>>
boundary ast
participant visitor <<TreeVisitor>>
participant classinfo <<ClassInfo>>
participant codeinfo <<CodeInfo>>

== setup ==
run -> run : load config
run -> gen : new(config)
activate gen
run -> gen : header()

== for each srcfile ==
run -> gen : do_file(srcfile)
gen -> visitor : new(srcfile, gen)
activate visitor
gen -> visitor : parse()
gen -> gen : start_file()
gen -> visitor : visit_tree()
visitor -> ast : parse(src)
visitor <- ast : tree
visitor -> visitor : visit(tree)
activate visitor
note left
     according
     to each
     node type
end note
activate visitor
visitor -> codeinfo : new(modulename)
activate codeinfo
visitor -\\ codeinfo : [Assign] add_variable(name)
loop for each ClassDef
''create classinfo
visitor -\\ classinfo : [ClassDef] new(classname)
activate classinfo
visitor -\\ classinfo : [Assign] add_classvar(name)
visitor -\\ visitor : [FunctionDef __init__]
activate visitor
visitor -\\ classinfo : [Assign to self] add_member(name)
deactivate visitor
visitor -\\ classinfo : [FunctionDef] add_method(node)
deactivate visitor
visitor -> classinfo : done(gen)
classinfo -> gen : print_classinfo(self)
deactivate classinfo
end
visitor -\\ codeinfo : [FunctionDef] add_function(node)
deactivate visitor
visitor -> codeinfo : done(gen)
codeinfo -> gen : print_codeinfo(self)
deactivate codeinfo
gen -> gen : end_file()
gen -/ visitor
deactivate visitor

== tear down ==
run -> gen : footer()
deactivate gen
@enduml
